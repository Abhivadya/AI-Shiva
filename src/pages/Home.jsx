import React, {useState, useEffect} from 'react';
import {Card, Loader, FormField} from '../component';

const RenderCards = ({data, title}) => {
    if(data?.length > 0) {
        return data.map(post=> <Card key={post._id} {...post}/>)
    }
    return (
        <h2 className='mt-5 font-bold text-[#6446ff] text-xl uppercase'>{title}</h2>
    )
}

const Home = () => {
    const [loading, setLoading] = useState(false);
    const [allPosts, setAllPosts] = useState(null);
    const [searchText, setSearchText] = useState('');
    const [searchTimeout, setSearchTimeout] = useState(null);
    const [searchedResults, setSearchedResults] = useState(null);

    useEffect(() => {
        const fetchPosts = async() => {
            setLoading(true);
            try {
                const response = await fetch('http://localhost:8080/api/v1/post', {
          method: 'GET',
          headers : {         
            'Content-Type': 'application/json',
          },
        })
        if(response.ok) {
            const result = await response.json();
            setAllPosts(result.data.reverse());
        }
            } catch(err){

            } finally {
                setLoading(false)
            }
        }
        fetchPosts();
    }, []);

const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
        setSearchedResults(searchResult);
      }, 500),
    );
  };

  return (
    <section>
        <div>
            <h1 className='font-extrabold text-black-700 text-[32px]'>The Community Showcase</h1>
            <p className='mt-2 text-[#666e75] text-[16px] max-w-[750px]'> Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
        </div>

        <div className='mt-6'>
            <FormField
                labelName='Search Posts'
                type='text'
                name='text'
                placeholder='Search posts'
                value={searchText}
                handleChange={handleSearchChange}
            />
        </div>

        <div className='mt-10 className=flex justify-center items-center'>
            { loading? (
                <Loader/>        
            ) : 
            (<>
                { searchText && (
                    <h2 className='font-medium text-[#666e75] text-xl mb-3'>showing results for 
                    <span className='text-[#222328] pl-1'>{searchText}</span></h2>
                )}
                <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
                    { searchText ? (
                        <RenderCards data={searchedResults} title='No search results found'/>
                    ) : (
                        <RenderCards data={allPosts} title='No posts found'/>
                    )

                    }
                </div>
            </>)
            }
        </div>
    </section>
  )
}

export default Home